Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Export$History = Elm.Export.History.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Import$History = Elm.Import.History.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Update = Elm.Update.make(_elm),
   $View = Elm.View.make(_elm);
   var _op = {};
   var mb = $Signal.mailbox($Update.NoOp);
   var path = Elm.Native.Port.make(_elm).inboundSignal("path",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
      v);
   });
   var setModelAction = A2($Signal.map,
   $Update.Init,
   A2($Signal.map,$Import$History.fromPath,path));
   var actionSignal = $Signal.mergeMany(_U.list([mb.signal
                                                ,setModelAction]));
   var modelSignal = A3($Signal.foldp,
   $Update.update,
   $Model.initialModel,
   actionSignal);
   var exportModelSignal = $Signal.dropRepeats(A2($Signal.map,
   $Model.modelToExportModel,
   modelSignal));
   var newPath = Elm.Native.Port.make(_elm).outboundSignal("newPath",
   function (v) {
      return v;
   },
   A2($Signal.map,$Export$History.toPath,exportModelSignal));
   var main = A2($Signal.map,$View.show(mb.address),modelSignal);
   return _elm.Main.values = {_op: _op
                             ,setModelAction: setModelAction
                             ,mb: mb
                             ,actionSignal: actionSignal
                             ,modelSignal: modelSignal
                             ,exportModelSignal: exportModelSignal
                             ,main: main};
};